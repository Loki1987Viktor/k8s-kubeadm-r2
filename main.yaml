# code: language=ansible
---
# wait all cluster nodes become available to start preparation
- hosts: dvm
  tasks:
    - name: "Waiting till haproxy nodes be available via SSH, check each 10 sec"
      wait_for:
        host: "{{ item }}"
        port: 22
        sleep: 10
        delay: 10
        timeout: 600
      loop:  "{{ groups.haproxy }}" #"{{ groups.masters[1:] + groups.workers }}"
      when: ( lb_count | int ) > 0
      connection: local

    - name: "Waiting till all master and worker nodes be available via SSH, check each 10 sec"
      wait_for:
        host: "{{ item }}"
        port: 22
        sleep: 10
        delay: 10
        timeout: 600
      loop:  "{{ groups.masters + groups.workers }}" #"{{ groups.masters[1:] + groups.workers }}"
      connection: local

- hosts: haproxy
  gather_facts: true
  become: true
  roles:
    - role: prepare_haproxy_lb
      when: ( lb_count | int ) > 0
  
# prepare additional disks and remap /var,/var/lib directories, 
# prepare OS configuration and kernel parameters and install packages before run K8s components
- hosts: masters:workers
  gather_facts: true
  become: true
  roles:
    - role: prepare_k8s_nodes
      nodes: "{{ groups.masters + groups.workers }}"

# install Helm and etcd tools on master nodes
- hosts: dvm:masters
  gather_facts: true
  become: true
  pre_tasks:
    - name:  "STAGE_[ 2 of 18 ]- install HELM v binaries on master nodes"
      debug:
        msg: "STAGE_[ 2 of 18 ]- install HELM v {{ helm_version }} binaries on master nodes"
  roles:
    - install_etcd_binaries
    - role: geerlingguy.helm
      helm_version: 'v3.11.1'

# install K8s binaries
- hosts: masters:workers
  gather_facts: true
  become: true
  roles:
    - install_k8s_binaries
    
  post_tasks:
    - name: check required K8s binaries was installed on every host
      ansible.builtin.include_tasks: check_k8s_binaries_install_state.yaml 

# prepare folders and prepare K8s cluster role manifests - to deprecate
#- hosts: workers
#  gather_facts: true
#  become: true
#  roles:
#    - k8s_rbac_cluster_role_manifests

- hosts: masters[0]
  gather_facts: true
  become: true
  vars_files:
    - ./vars/base_vars.yaml
  roles:
    - bootstrap_k8s_cluster # create a new K8s cluster, join additional master and worker nodes
    - deploy_k8s_cni        # add and configure K8s CNI components
    - k8s_patch_coredns
    - deploy_k8s_csi        # add and configure K8s CSI components - can be vcloud or vsphere 
    - k8s_addons_metrics    # add K8s metrics components
    - k8s_addons_ingress    # add K8s ingress components and create basic ingress resources
    - role: k8s_addons_monitoring # add and configure K8s monitoring components
      when: obs_type != "none"
#    - categorize_k8s_nodes  # label, taint and cordon nodes depend on their purpose  
#    - k8s_rbac_certs
#    - k8s_rbac_kubeconfigs
#    - k8s_rbac_main           # add K8s RBAC components

- hosts: masters
  gather_facts: true
  become: true
  roles:
    - k8s_mst_etcd_bkp
  
# configure management evironment on DVM 
- hosts: dvm
  gather_facts: true
  become: true
  roles:
    - dvm_config
    - k8s_dvm_gather_bkp

- hosts: masters[0]
  gather_facts: true
  become: true
  roles:
    - deploy_finalize
  

# configure backup etcd task
#- import_playbook: ./cleanup_finalize.yaml
